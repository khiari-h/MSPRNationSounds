{"version":3,"file":"static/js/762.df05d242.chunk.js","mappings":"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","sources":["component/organisms/ProgrammingOrganisms/ConcertProgramming.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport InfoCard from '../../molecules/InfoCard';\r\nimport Text from '../../atoms/Text';\r\nimport Filter from '../../atoms/Filter';\r\nimport Button from '../../atoms/Button';\r\nimport { fetchWithCache } from '../../../utils/cacheUtils'; \r\nimport { formatDate, formatTime } from '../../../utils/formatUtilis';\r\nimport { useResponsiveItemsPerPage } from '../../../hooks/useResponsiveItemPerPage'; \r\n\r\nconst ConcertsProgramming = ({ apiEndpoint = '/api/wordpress/concerts' }) => {\r\n  const [concerts, setConcerts] = useState([]);\r\n  const [filters, setFilters] = useState({ date: '', heuredebut: '', lieu: '', type: '' });\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [concertsPerPage, setConcertsPerPage] = useState(6);\r\n  const [loading, setLoading] = useState(true); \r\n  const concertsListRef = useRef(null);\r\n\r\n  // Utilisation du hook pour ajuster le nombre de concerts par page\r\n  useResponsiveItemsPerPage(setConcertsPerPage);\r\n\r\n  useEffect(() => {\r\n    const fetchConcerts = async () => {\r\n      try {\r\n        const concertsData = await fetchWithCache('concerts', apiEndpoint, 3600);\r\n\r\n        const formattedConcerts = await Promise.all(\r\n          concertsData.map(async (concert) => {\r\n            if (concert.acf.photo) {\r\n              const logoData = await fetchWithCache(`logo_${concert.acf.photo}`, `/api/wordpress/media/${concert.acf.photo}`, 3600);\r\n              concert.acf.photo = logoData.source_url;\r\n            }\r\n            concert.acf.date = formatDate(concert.acf.date);\r\n            concert.acf.heuredebut = formatTime(concert.acf.heuredebut);\r\n            concert.acf.heurefin = formatTime(concert.acf.heurefin);\r\n            return concert;\r\n          })\r\n        );\r\n\r\n        setConcerts(formattedConcerts);\r\n      } catch (error) {\r\n        console.error(\"Erreur lors de la récupération des concerts!\", error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchConcerts();\r\n  }, [apiEndpoint]);\r\n\r\n  const handleFilterChange = (key, value) => {\r\n    setFilters((prevFilters) => ({ ...prevFilters, [key]: value }));\r\n  };\r\n\r\n  const filteredConcerts = concerts.filter((concert) => {\r\n    return (\r\n      (filters.date === '' || concert.acf.date === filters.date) &&\r\n      (filters.heuredebut === '' || concert.acf.heuredebut === filters.heuredebut) &&\r\n      (filters.lieu === '' || concert.acf.lieu === filters.lieu) &&\r\n      (filters.type === '' || concert.acf.type === filters.type)\r\n    );\r\n  });\r\n\r\n  const indexOfLastConcert = currentPage * concertsPerPage;\r\n  const indexOfFirstConcert = indexOfLastConcert - concertsPerPage;\r\n  const currentConcerts = filteredConcerts.slice(indexOfFirstConcert, indexOfLastConcert);\r\n  const totalPages = Math.ceil(filteredConcerts.length / concertsPerPage);\r\n\r\n  return (\r\n    <section className=\"container mx-auto py-8\" aria-labelledby=\"concerts-programming-heading\">\r\n      <Text content=\"Programmation des Concerts\" type=\"h1\" className=\"text-concert-title text-center\" id=\"concerts-programming-heading\" />\r\n      {loading ? (\r\n        <p>Chargement des concerts...</p> \r\n      ) : (\r\n        <>\r\n          {filteredConcerts.length === 0 ? (\r\n            <p>Aucun concert trouvé avec les critères sélectionnés.</p>\r\n          ) : (\r\n            <>\r\n              <Filter\r\n                data={concerts.map(concert => ({\r\n                  date: concert.acf.date,\r\n                  heuredebut: concert.acf.heuredebut,\r\n                  lieu: concert.acf.lieu,\r\n                  type: concert.acf.type,\r\n                }))}\r\n                filters={filters}\r\n                filterKeys={['date', 'heuredebut', 'lieu', 'type']}\r\n                handleFilterChange={handleFilterChange}\r\n                resetFilters={() => setFilters({ date: '', heuredebut: '', lieu: '', type: '' })}\r\n              />\r\n              <div \r\n                className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\" \r\n                tabIndex=\"-1\" \r\n                ref={concertsListRef} \r\n                aria-label=\"Liste des concerts\"\r\n              >\r\n                {currentConcerts.map((concert, index) => (\r\n                  <InfoCard\r\n                    key={index}\r\n                    title={concert.acf.nom}\r\n                    description={concert.acf.description}\r\n                    image={concert.acf.photo || 'default.jpg'}\r\n                    additionalInfo={`Date: ${concert.acf.date}, Heure de début: ${concert.acf.heuredebut}, Heure de fin: ${concert.acf.heurefin}, Lieu: ${concert.acf.lieu}, Type: ${concert.acf.type}`}\r\n                    type=\"program\"\r\n                  />\r\n                ))}\r\n              </div>\r\n              <div className=\"flex justify-center mt-4\">\r\n                {Array.from({ length: totalPages }, (_, index) => (\r\n                  <Button \r\n                    key={index + 1}\r\n                    onClick={() => setCurrentPage(index + 1)}\r\n                    label={String(index + 1)}\r\n                    className=\"mx-1\"\r\n                  />\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default ConcertsProgramming;\r\n"],"names":["_ref","apiEndpoint","concerts","setConcerts","useState","filters","setFilters","date","heuredebut","lieu","type","currentPage","setCurrentPage","concertsPerPage","setConcertsPerPage","loading","setLoading","concertsListRef","useRef","useResponsiveItemsPerPage","useEffect","async","concertsData","fetchWithCache","formattedConcerts","Promise","all","map","concert","acf","photo","logoData","source_url","formatDate","formatTime","heurefin","error","console","fetchConcerts","filteredConcerts","filter","indexOfLastConcert","indexOfFirstConcert","currentConcerts","slice","totalPages","Math","ceil","length","_jsxs","className","children","_jsx","Text","content","id","_Fragment","Filter","data","filterKeys","handleFilterChange","key","value","prevFilters","resetFilters","tabIndex","ref","index","InfoCard","title","nom","description","image","additionalInfo","Array","from","_","Button","onClick","label","String"],"sourceRoot":""}